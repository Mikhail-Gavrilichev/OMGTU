using System;
using System.Drawing;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Xml;
using System.Xml.Linq;
using static System.Net.Mime.MediaTypeNames;
using static H;

class H
{
    public enum sign
    {
        Undifined,
        Is_boss,
        Isnt_boss
    }
    public class human
    {
        public string name;
        public string id;
        public string boss_name;
        public int boss_index;
        public sign boss_sign;
        public human()
        {
            name = "";
            boss_sign  = sign.Undifined;
            boss_index = -1;
        }
    }
    static int HumanCount = 0;

    static int chief_index;

    static void ReadFile(ref human[] Mas)
    {
        StreamReader sr = new StreamReader("E://work//Kompany xxx//Kompany xxx//input.txt");
        String Line1;
        String Line2;
        while (true)
        {        
            Line1 = sr.ReadLine();
            Line2 = sr.ReadLine();

            if (Line1 == "END")
                break;

            int ind1 = AddHumanToMas(Line1, ref Mas);
            int ind2 = AddHumanToMas(Line2, ref Mas);

            Mas[ind2].boss_index = ind1;
        }
        sr.Close();
        chief_index = Get_chief_Index(Line2, Mas);
    }

    static int Get_chief_Index(string Line2, human[] Mas)
    {
        string[] t = Line2.Split(" ");
        int a = FindByID(Mas, t[0]);
        if (a != -1)
            return a;

        for (int i = 0; i < HumanCount; i++)
        {
            if(Mas[i].name == Line2)
                return i;    
        }
        return -1;
    }

    static int AddHumanToMas(string Line, ref human[] Mas)
    {
        string[] t = Line.Split(" ");
        int i = FindByID(Mas, t[0]);    // - 1 если не нашли

        string Name = GetName(t);

        if (i == -1)
        {
            // не нашли
            AddHumanToMasByIndex(ref Mas, HumanCount, t[0], Name);
            HumanCount++;
            return HumanCount-1;
        }
        else
        {
            // Уже есть в массие
            AddHumanToMasByIndex(ref Mas, i, t[0], Name);
            return i;
        }
    }

    static void AddHumanToMasByIndex(ref human[]Mas, int i, string Id, string Name)
    {
        if (Mas[i] == null)
            Mas[i] = new human();
        if (Mas[i].name == "")
        Mas[i].name = Name;
        Mas[i].id= Id;
    }

    static int FindByID(human[]Mas, string Id)
    {
        for (int i = 0; i< HumanCount; i++)
        {
            if (Mas[i].id == Id)
            {
                return i;
            }
        }
        return -1;
    }
    static string GetName(string [] t)
    {
        string Name="";
        if (t.Length > 1)
        {
            Name=t[1]+" "+t[2]; 
        }
        return Name;
    }
    static void PrintToFile(human[] Mas, string FileName)
    {
        StreamWriter sw = new StreamWriter(FileName);

        for (int i = 0; i < HumanCount; i++)
        {
            sw.WriteLine(Mas[i].id + " " + Mas[i].name);
        }

        //Close the file
        sw.Close();
    }

    static sign GetSign(human []Mas, int i)
    {
        if (Mas[i].boss_sign != sign.Undifined)
            return Mas[i].boss_sign;


        string chief_name = Mas[chief_index].name;

        if (Mas[i].name == chief_name)
            return sign.Is_boss;

        if(Mas[i].boss_index != -1)
        {
            return GetSign(Mas, Mas[i].boss_index);
        }

        return sign.Isnt_boss;
    }

    static void Find_All_Junior(human[] Mas)
    {
        for (int i=0; i< HumanCount; i++)
        {
            Mas[i].boss_sign = GetSign(Mas, i);
        }
    }
    static void Sort(human[] Mas)
    {
        for (int j=0; j< HumanCount; j++)
        {
            for (int i=0; i< HumanCount-1; i++)
            if (Convert.ToInt32(Mas[i].id) > Convert.ToInt32(Mas[i+1].id))
            {
                human a = Mas[i + 1];
                Mas[i + 1] = Mas[i];
                Mas[i] = a;
            }
        }
    }
    static void PrintToFileJunior(human[] Mas, string File_name)
    {
        Mas[chief_index].boss_sign = sign.Isnt_boss;
        StreamWriter sw = new StreamWriter(File_name);

        for (int i = 0; i < HumanCount; i++)
        {
            if (Mas[i].boss_sign == sign.Is_boss)
            {
                if (Mas[i].name=="")
                    Mas[i].name = "Unknown Name";
                sw.WriteLine(Mas[i].id + " " + Mas[i].name);
            }
        }

        //Close the file
        sw.Close();
    }

    static void Main()
    {
        human [] Mas  = new human[5000];
        ReadFile(ref Mas);
        //PrintToFile(Mas, "human.txt");

        Find_All_Junior(Mas);
        Sort(Mas);
        PrintToFileJunior(Mas, "output.txt");
    }
}







