using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Newtonsoft.Json;
using static System.Net.Mime.MediaTypeNames;
using static H;

class H
{
    public class task
    {
        public string taskName;
        public student[] data;
    }
    public class student
    {
        public string name;
        public string group;
        public string discipline;
        public int mark;
    }


    public class answ1
    {
        public Response1[] Response;
    }
    public class Response1
    {
        public Response1(string Cadet, double GPA)
        {
            this.Cadet = Cadet;
            this.GPA = GPA;
        }
        public string? Cadet;
        public double GPA;
    }



    public class answ2
    {
        public Response2[] Response;
    }
    public class Response2
    {
        public Response2(string discipline, double GPA)
        {
            this.discipline = discipline;
            this.GPA = GPA;    
        }
        public string? discipline;
        public double GPA;
    }


    public class answ3
    {
        public Response3[] Response;
    }
    public class Response3
    {
        public string? Discipline { get; set; }
        public string? Group { get; set; }
        public double GPA { get; set; }
    }


    static void Main()
    {
        Task("input1.txt", "output1.txt");
        Task("input2.txt", "output2.txt");
        Task("input3.txt", "output3.txt");
    }
    static void Task(string input_file, string output_file)
    {
        StreamReader sr0 = new StreamReader(input_file);
        string json = sr0.ReadToEnd();
        task m = JsonConvert.DeserializeObject<task>(json);
        if (m.taskName == "GetStudentsWithHighestGPA")
        {
            Task1(m, output_file);
        }
        else if (m.taskName == "CalculateGPAByDiscipline")
        {
            Task2(m, output_file);
        }
        else if (m.taskName == "GetBestGroupsByDiscipline")
        {
            Task3(m, output_file);
        }
        else
        {
            Console.WriteLine("Неизвестное задание");
        }
        sr0.Close();
    }

    // Определить студента/студентов с максимальным средним баллом. 
    static void Task1(task m, string output_file)
    {
        IEnumerable<Response1> students = from i in m.data
                                          group i by i.name into g
                                          select new Response1(g.Key, Convert.ToDouble(g.Sum(answ => answ.mark)) / g.Count());

        IEnumerable<Response1> ar = from i in students
                                    where i.GPA == students.Max(a=>a.GPA)
                                    select i;

        answ1 answ = new answ1();
        answ.Response = ar.ToArray();

        string json = JsonConvert.SerializeObject(answ);

        StreamWriter sw = new StreamWriter(output_file);
        sw.Write(json);
        sw.Close();
    }

    // Вычислить средний бал по каждому предмету
    static void Task2(task m, string output_file)
    {
        IEnumerable<Response2> ar = from i in m.data
                                    group i by i.discipline into g
                                    select new Response2(g.Key, Convert.ToDouble(g.Sum(answ => answ.mark)) / g.Count());


        answ2 answ = new answ2();
        answ.Response = ar.ToArray();
        string json = JsonConvert.SerializeObject(answ);

        StreamWriter sw = new StreamWriter(output_file);
        sw.Write(json);
        sw.Close();
    }

    public class GroupGPA
    {
        public string group_name { get; set; }
        public double GPA { get; set; }
    }
    public class DisciplineGroup
    {
        public string discipline { get; set; }
        public List<student> student { get; set; }
    }

    //По каждому предмету определить группу с лучшим средним баллом
    static void Task3(task m, string output_file)
    {
        IEnumerable<DisciplineGroup> disp_group = from i in m.data
                                                  group i by i.discipline into discipline_group
                                                  select new DisciplineGroup {
                                                      discipline = discipline_group.Key,
                                                      student = discipline_group.Where(a=>a.discipline == discipline_group.Key).ToList()
                                                  };

        List<Response3> ar = new List<Response3>();
        for (int i = 0; i < disp_group.Count(); i++)
        {
            IEnumerable<GroupGPA> group_gpa = from a in disp_group.ToList()[i].student
                                              group a by a.@group into g
                                              select new GroupGPA {
                                                  group_name = g.Key,
                                                  GPA = Convert.ToDouble(g.Sum(answ => answ.mark)) / g.Count()
                                              };

            IEnumerable<Response3> ar_elem = from a in group_gpa
                                             where a.GPA == group_gpa.Max(c=>c.GPA)
                                             select new Response3{
                                                 Discipline = disp_group.ToList()[i].discipline,
                                                 Group = a.group_name, 
                                                 GPA = a.GPA
                                             };
            ar.AddRange(ar_elem);
        }


        answ3 answ = new answ3();
        answ.Response = ar.ToArray();

        string json = JsonConvert.SerializeObject(answ);

        StreamWriter sw = new StreamWriter(output_file);
        sw.Write(json);
        sw.Close();
    }


}

