using System;
using System.Linq;
using System.Collections;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Drawing;
using System.Dynamic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Xml;
using System.Xml.Linq;
using Microsoft.VisualBasic;
using static System.Net.Mime.MediaTypeNames;
using static H;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
class H
{
    class edge
    {
        public int point1;
        public int point2;
        public int c;
        public int f=0;
    }
    static int[,] create_mas()
    {
        int[,] mas = new int[5, 5];

        mas[0, 0] = 0;
        mas[0, 1] = 1;
        mas[0, 2] = 0;
        mas[0, 3] = 1;
        mas[0, 4] = 0;

        mas[1, 0] = 0;
        mas[1, 1] = 0;
        mas[1, 2] = 1;
        mas[1, 3] = 1;
        mas[1, 4] = 1;

        mas[2, 0] = 0;
        mas[2, 1] = 0;
        mas[2, 2] = 0;
        mas[2, 3] = 1;
        mas[2, 4] = 1;

        mas[3, 0] = 0;
        mas[3, 1] = 0;
        mas[3, 2] = 0;
        mas[3, 3] = 0;
        mas[3, 4] = 1;

        mas[4, 0] = 0;
        mas[4, 1] = 0;
        mas[4, 2] = 0;
        mas[4, 3] = 0;
        mas[4, 4] = 0;

        return mas;
    }
    static void Main()
    {
        int[,] mas = create_mas();
        int n = mas.GetUpperBound(0) + 1;

        int[] points = new int[5];
        points = [0,1,2,3,4];

        edge[] edges = new edge[9];

        edges[0] = new edge {point1=0, point2=1};
        edges[1] = new edge { point1 = 0, point2 = 1, c=7};
        edges[2] = new edge { point1 = 0, point2 = 3, c=4};
        edges[3] = new edge { point1 = 1, point2 = 2, c=4};
        edges[4] = new edge { point1 = 1, point2 = 3, c=8};
        edges[5] = new edge { point1 = 1, point2 = 4, c=4};
        edges[6] = new edge { point1 = 2, point2 = 3, c=5};
        edges[7] = new edge { point1 = 2, point2 = 4, c=12};
        edges[8] = new edge { point1 = 3, point2 = 4, c=11};

        int []visited =new int[9];

        for (int i=0; i<edges.Length; i++)
        {
            int q = Ford_F(edges[i].point1, edges[i].c, ref visited[i]);
            Console.WriteLine(edges[i].point1 + " " + edges[i].point2 + " " + q + "/" + edges[i].c);
        }
    }
    static int Ford_F(int u, int c, ref int vis)
    {
        if (u == 4)
            return c;
        vis = 1;
        for (int i=0; )
    }
}
