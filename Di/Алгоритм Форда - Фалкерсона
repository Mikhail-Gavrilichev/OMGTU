using System;
using System.Linq;
using System.Collections;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Drawing;
using System.Dynamic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Xml;
using System.Xml.Linq;
using Microsoft.VisualBasic;
using static System.Net.Mime.MediaTypeNames;
using static H;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Security.AccessControl;

public class H
{
    static bool Find_way(int[,] graf, int s, int t, ref int[] parent, int n)
    {
        bool[] visited = new bool[n];
        for (int i = 0; i < n; ++i)
        {
            visited[i] = false;
        }

        List<int> q = new List<int>(); 
        q.Add(s);               
        visited[s] = true;
        parent[s] = -1;

        while (q.Count != 0)
        {
            int u = q[0];
            q.RemoveAt(0);

            for (int i = 0; i < n; i++)
            {
                if (visited[i] == false && graf[u, i] > 0)
                {
                    if (i == t)
                    {
                        parent[i] = u;
                        return true;
                    }
                    q.Add(i);
                    parent[i] = u;
                    visited[i] = true;
                }
            }
        }
        return false;
    }

    static int fordFulkerson(int[,] gr, int s, int t, int n)
    {
        int i, j;
        int[,] graf = new int[n, n];

        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                graf[i, j] = gr[i, j];
            }
        }

        int[] parents = new int[n];
        int max = 0;                                 // маскимальный поток

        while (Find_way(graf, s, t, ref parents, n))
        {
            int flow = int.MaxValue;                 // увеличиваюший поток
            for (j = t; j != s; j = parents[j])
            {
                i = parents[j];
                flow = Math.Min(flow, graf[i, j]);
            }

            for (j = t; j != s; j = parents[j])
            {
                i = parents[j];
                graf[i, j] -= flow;
                graf[j, i] += flow;
            }

           max += flow;
        }

        return max;
    }
    static int[,] create_mas()
    {
        int[,] mas = new int[4, 4];

        mas[0, 0] = 0;
        mas[0, 1] = 1000;
        mas[0, 2] = 1000;
        mas[0, 3] = 0;

        mas[1, 0] = 0;
        mas[1, 1] = 0;
        mas[1, 2] = 1;
        mas[1, 3] = 1000;

        mas[2, 0] = 0;
        mas[2, 1] = 0;
        mas[2, 2] = 0;
        mas[2, 3] = 1000;

        mas[3, 0] = 0;
        mas[3, 1] = 0;
        mas[3, 2] = 0;
        mas[3, 3] = 0;

        return mas;
    }
    public static void Main()
    {
        int n = 4;
        int[,] mas = create_mas();

        Console.WriteLine("q= " + fordFulkerson(mas, 0, 3, n));
    }
}
